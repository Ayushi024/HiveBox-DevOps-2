name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r sensor_api/requirements.txt
          pip install -r basic_versioning/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 sensor_api basic_versioning --max-line-length=100

      - name: Run unit tests
        run: |
          pytest sensor_api/test_app.py basic_versioning/test_version.py --maxfail=5 --disable-warnings -q

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-test]
    outputs:
      sensor_image_tag: ${{ steps.export-tags.outputs.sensor_image_tag }}
      versioning_image_tag: ${{ steps.export-tags.outputs.versioning_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker images
        id: export-tags
        run: |
          SENSOR_IMAGE_TAG="ghcr.io/ayushi024/hivebox-sensor-api:$(git rev-parse --short HEAD)"
          VERSIONING_IMAGE_TAG="ghcr.io/ayushi024/hivebox-basic-versioning:$(git rev-parse --short HEAD)"

          docker build -t $SENSOR_IMAGE_TAG -f ./sensor_api/Dockerfile ./sensor_api
          docker push $SENSOR_IMAGE_TAG

          docker build -t $VERSIONING_IMAGE_TAG -f ./basic_versioning/Dockerfile ./basic_versioning
          docker push $VERSIONING_IMAGE_TAG
          
          echo "sensor_image_tag=$SENSOR_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "versioning_image_tag=$VERSIONING_IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    environment: staging
    env:
      SENSOR_IMAGE_TAG: ${{ needs.docker-build.outputs.sensor_image_tag }}
      VERSIONING_IMAGE_TAG: ${{ needs.docker-build.outputs.versioning_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes (KIND)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name hivebox

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Set Kubernetes Context
        run: kind export kubeconfig --name hivebox

      - name: Apply Kubernetes manifests
        run: kubectl apply -f kubernetes/

      - name: Restart deployments
        run: |
          kubectl set image deployment/hivebox-sensor-api sensor-api=${{ env.SENSOR_IMAGE_TAG }}
          kubectl set image deployment/hivebox-basic-versioning basic-versioning=${{ env.VERSIONING_IMAGE_TAG }}
          kubectl rollout restart deployment/hivebox-sensor-api
          kubectl rollout restart deployment/hivebox-basic-versioning

      - name: Save kubeconfig
        run: |
          mkdir -p ~/.kube
          kind export kubeconfig --name hivebox
          cat ~/.kube/config > kubeconfig

      - name: Upload kubeconfig as artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    env:
      SENSOR_IMAGE_TAG: ${{ needs.docker-build.outputs.sensor_image_tag }}
      VERSIONING_IMAGE_TAG: ${{ needs.docker-build.outputs.versioning_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig

      - name: Set up Kubernetes Context
        run: |
          mkdir -p ~/.kube
          mv kubeconfig ~/.kube/config

      - name: Debug Kubernetes Context
        run: |
          echo "Checking Kubernetes context..."
          kubectl config current-context || echo "No current context!"
          kubectl cluster-info || echo "Cluster is not running!"
          kubectl get nodes || echo "No nodes available!"
          kubectl get pods -A || echo "No running pods!"

      - name: Apply Kubernetes manifests
        run: kubectl apply -f kubernetes/

      - name: Restart deployments
        run: |
          kubectl set image deployment/hivebox-sensor-api sensor-api=${{ env.SENSOR_IMAGE_TAG }}
          kubectl set image deployment/hivebox-basic-versioning basic-versioning=${{ env.VERSIONING_IMAGE_TAG }}
          kubectl rollout restart deployment/hivebox-sensor-api
          kubectl rollout restart deployment/hivebox-basic-versioning
