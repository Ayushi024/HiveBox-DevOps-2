name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r sensor_api/requirements.txt
          pip install -r basic_versioning/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 sensor_api basic_versioning --max-line-length=100

      - name: Set Environment Variables
        run: |
          echo "OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" >> $GITHUB_ENV
          echo "APP_VERSION=v1.0.0" >> $GITHUB_ENV

      - name: Start APIs (Run in Background)
        run: |
          python sensor_api/app.py --host=0.0.0.0 --port=5000 & 
          python basic_versioning/app_version.py --host=0.0.0.0 --port=5001 & 
          sleep 5

      - name: Run unit tests
        run: |
          pytest sensor_api/test_app.py basic_versioning/test_version.py --maxfail=5 --disable-warnings -q
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml
          
      - name: Test network connectivity to OpenWeather API
        run: |
          echo "Checking OpenWeather API key presence: ${{ secrets.OPENWEATHER_API_KEY != '' }}"
          curl -I "https://api.openweathermap.org/data/2.5/weather?q=London&appid=$OPENWEATHER_API_KEY"
  

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Sonar Scanner
        run: |
          curl -Lo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /usr/local/sonar-scanner
          export PATH="/usr/local/sonar-scanner/bin:$PATH"

      - name: Run SonarQube Analysis for Python
        run: |
          /usr/local/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=hivebox-org_hivebox-org \
            -Dsonar.organization=hivebox-org \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.python.version=3 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}



  
    # âœ… Terrascan Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Install Terrascan
        run: |
         curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
         tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
         install terrascan /usr/local/bin && rm terrascan
         terrascan



      - name: Verify Terrascan Installation
        run: |
          terrascan version

      - name: Run Terrascan Scan
        run: |
          terrascan scan -t k8s -d kubernetes/

      - name: Run Terrascan for Kubernetes
        run: terrascan scan --iac-type k8s --iac-dir kubernetes/



  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    outputs:
      sensor_image_tag: ${{ steps.export-tags.outputs.sensor_image_tag }}
      versioning_image_tag: ${{ steps.export-tags.outputs.versioning_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker images
        id: export-tags
        run: |
         SENSOR_IMAGE_TAG="ghcr.io/ayushi024/hivebox-sensor-api:$(git rev-parse --short HEAD)"
         VERSIONING_IMAGE_TAG="ghcr.io/ayushi024/hivebox-basic-versioning:$(git rev-parse --short HEAD)"

         echo "SENSOR_IMAGE_TAG=$SENSOR_IMAGE_TAG"
         echo "VERSIONING_IMAGE_TAG=$VERSIONING_IMAGE_TAG"

         docker build -t $SENSOR_IMAGE_TAG -f ./sensor_api/Dockerfile ./sensor_api
         docker push $SENSOR_IMAGE_TAG

         docker build -t $VERSIONING_IMAGE_TAG -f ./basic_versioning/Dockerfile ./basic_versioning
         docker push $VERSIONING_IMAGE_TAG

         echo "sensor_image_tag=$SENSOR_IMAGE_TAG" >> $GITHUB_OUTPUT
         echo "versioning_image_tag=$VERSIONING_IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Debug Outputs
        run: |
         echo "Sensor API Image Tag Output: ${{ steps.export-tags.outputs.sensor_image_tag }}"
         echo "Versioning API Image Tag Output: ${{ steps.export-tags.outputs.versioning_image_tag }}"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    environment: staging
    env:
      SENSOR_IMAGE_TAG: ${{ needs.docker-build.outputs.sensor_image_tag }}
      VERSIONING_IMAGE_TAG: ${{ needs.docker-build.outputs.versioning_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install KIND
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      

      - name: Create KIND Cluster with Ingress-Nginx
        run: |
          cat <<EOF | kind create cluster --name hivebox --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                - containerPort: 443
                  hostPort: 443
          EOF

      - name: Ensure KIND Cluster Exists
        run: |
          if ! kind get clusters | grep -q "hivebox"; then
            echo "KIND cluster 'hivebox' not found! Creating..."
            kind create cluster --name hivebox
          else
            echo "KIND cluster 'hivebox' already exists!"
          fi
      - name: Wait for Kubernetes to be Ready
        run: |
          kubectl cluster-info
          kubectl wait --namespace kube-system --for=condition=ready pod --selector=k8s-app=kube-dns --timeout=90s

      - name: Deploy Ingress-Nginx
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

      - name: Set Kubernetes Context
        run: kind export kubeconfig --name hivebox

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f kubernetes/

      - name: Restart Deployments
        run: |
          kubectl set image deployment/hivebox-sensor-api sensor-api=${{ env.SENSOR_IMAGE_TAG }}
          kubectl set image deployment/hivebox-basic-versioning basic-versioning=${{ env.VERSIONING_IMAGE_TAG }}
          kubectl rollout restart deployment/hivebox-sensor-api
          kubectl rollout restart deployment/hivebox-basic-versioning
      
      - name: Verify Deployment
        run: |
          echo "Checking cluster status..." 
          kubectl get nodes
          kubectl get pods -A
          kubectl get deployments -A
          echo "Checking event logs..." 
          kubectl get events --sort-by=.metadata.creationTimestamp | tail -20
          echo "Describing failed deployments..." 
          kubectl describe deployment hivebox-sensor-api || echo "No details found for hivebox-sensor-api"
          kubectl describe deployment hivebox-basic-versioning || echo "No details found for hivebox-basic-versioning"

          
      # - name: Debug Kubernetes Deployment (Staging)
      #   run: |
      #     echo " Checking cluster status..." 
      #     kubectl get nodes
      #     kubectl get pods -A
      #     kubectl get deployments -A
      #     echo " Checking event logs..." 
      #     kubectl get events --sort-by=.metadata.creationTimestamp | tail -20
      #     echo " Describing failed deployments..." 
      #     kubectl describe deployment hivebox-sensor-api || echo "No details found for hivebox-sensor-api"
      #     kubectl describe deployment hivebox-basic-versioning || echo "No details found for hivebox-basic-versioning"
      #     echo " Checking logs of failing pods..."
      #     kubectl logs -l app=hivebox-sensor-api --tail=50 || echo "No logs found for hivebox-sensor-api"
      #     kubectl logs -l app=hivebox-basic-versioning --tail=50 || echo "No logs found for hivebox-basic-versioning"

      # - name: Save kubeconfig
      #   run: |
      #     mkdir -p ~/.kube
      #     kind export kubeconfig --name hivebox
      #     cat ~/.kube/config > kubeconfig

      # - name: Upload kubeconfig as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: kubeconfig
      #     path: kubeconfig
     
      # - name: Debug Kubernetes Deployment
      #   run: |
      #    echo "Checking Deployments..."
      #    kubectl get deployments -A
      #    echo "Checking Pods..."
      #    kubectl get pods -A
      #    echo "Checking Events..."
      #    kubectl get events --sort-by=.metadata.creationTimestamp


 
