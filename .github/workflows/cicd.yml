name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# ---------------------
# Lint, Test & MinIO Setup
# ---------------------
jobs:
  lint-test:
    runs-on: ubuntu-latest
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -s http://localhost:9000/minio/health/live || exit 1"
          --health-interval 5s
          --health-retries 5
          --health-timeout 5s
          --entrypoint "" minio/minio server /data --console-address ":9001"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r sensor_api/requirements.txt
          pip install -r basic_versioning/requirements.txt
          pip install flake8 pytest redis minio

      - name: Wait for MinIO to be ready
        run: |
          echo "Waiting for MinIO to be ready..."
          for i in {1..10}; do
            if curl -s http://localhost:9000/minio/health/live; then
              echo " MinIO is ready!"
              exit 0
            fi
            echo " Waiting for MinIO... Attempt $i/10"
            sleep 5
          done
          echo " MinIO did not start in time."
          exit 1

      - name: Debug MinIO Logs if Failed
        if: failure()
        run: |
          echo " Collecting MinIO Logs for Debugging..."
          docker logs $(docker ps -q --filter ancestor=minio/minio) || true

      - name: Configure MinIO Bucket
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/
          mc alias set myminio http://localhost:9000 minioadmin minioadmin
          mc mb myminio/test-bucket || true

      - name: Lint with flake8
        run: flake8 sensor_api basic_versioning --max-line-length=100

      - name: Start APIs (Run in Background)
        run: |
          python sensor_api/app.py --host=0.0.0.0 --port=5000 &
          python basic_versioning/app_version.py --host=0.0.0.0 --port=5001 &
          sleep 5

      - name: Run unit tests
        run: |
          pytest sensor_api/test_app.py basic_versioning/test_version.py --maxfail=5 --disable-warnings -q

# ---------------------
# Docker Build and Digest Generation
# ---------------------
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-test]
    outputs:
      sensor_image_digest: ${{ steps.sensor-digest.outputs.digest }}
      versioning_image_digest: ${{ steps.versioning-digest.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Images
        run: |
          SENSOR_IMAGE_TAG="ghcr.io/ayushi024/hivebox-sensor-api:$(git rev-parse --short HEAD)"
          VERSIONING_IMAGE_TAG="ghcr.io/ayushi024/hivebox-basic-versioning:$(git rev-parse --short HEAD)"

          # Build and push images
          docker build -t $SENSOR_IMAGE_TAG -f ./sensor_api/Dockerfile ./sensor_api
          docker push $SENSOR_IMAGE_TAG

          docker build -t $VERSIONING_IMAGE_TAG -f ./basic_versioning/Dockerfile ./basic_versioning
          docker push $VERSIONING_IMAGE_TAG

      - name: Get Sensor API Image Digest
        id: sensor-digest
        run: |
          docker pull $SENSOR_IMAGE_TAG
          SENSOR_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $SENSOR_IMAGE_TAG)
          echo "digest=${SENSOR_IMAGE_DIGEST#*@}" >> $GITHUB_OUTPUT

      - name: Get Basic Versioning Image Digest
        id: versioning-digest
        run: |
          docker pull $VERSIONING_IMAGE_TAG
          VERSIONING_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $VERSIONING_IMAGE_TAG)
          echo "digest=${VERSIONING_IMAGE_DIGEST#*@}" >> $GITHUB_OUTPUT

# ---------------------
# Update Kubernetes Manifests with Digests
# ---------------------
  update-manifests:
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Switch to main branch
        run: |
          git fetch origin main
          git checkout -b update-image-digests

      - name: Install yq for YAML Manipulation
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.24.5/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Update Kubernetes Manifests with Digests
        run: |
          yq e '(.spec.template.spec.containers[] | select(.name == "sensor-api")).image = "ghcr.io/ayushi024/hivebox-sensor-api@${{ needs.docker-build.outputs.sensor_image_digest }}"' -i kubernetes/deployment.yaml
          yq e '(.spec.template.spec.containers[] | select(.name == "basic-versioning")).image = "ghcr.io/ayushi024/hivebox-basic-versioning@${{ needs.docker-build.outputs.versioning_image_digest }}"' -i kubernetes/deployment.yaml

      - name: Commit and Push Updated Manifests
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes manifests with image digests"
          git push origin update-image-digests

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-image-digests
          base: main
          title: "Update Kubernetes manifests with image digests"
          body: |
            This PR updates the Kubernetes manifests with the latest image digests.
          labels: |
            auto-update

# ---------------------
# Security Scan with Terrascan
# ---------------------
  security-scan:
    runs-on: ubuntu-latest
    needs: [update-manifests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terrascan
        run: |
          curl -L https://github.com/tenable/terrascan/releases/download/v1.16.0/terrascan_1.16.0_Linux_x86_64.tar.gz -o terrascan.tar.gz
          tar -xzf terrascan.tar.gz
          mv terrascan /usr/local/bin/
          rm -f terrascan.tar.gz

      - name: Run Terrascan on Kubernetes Manifests
        run: terrascan scan --iac-type k8s --iac-dir kubernetes/

# ---------------------
# Deploy to Staging
# ---------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: update-manifests
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install KIND
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create KIND Cluster with Ingress-Nginx
        run: |
          cat <<EOF | kind create cluster --name hivebox --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                - containerPort: 443
                  hostPort: 443
          EOF

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f kubernetes/

      - name: Restart Deployments
        run: |
          kubectl rollout restart deployment/hivebox-sensor-api
          kubectl rollout restart deployment/hivebox-basic-versioning

      - name: Verify Deployment Status
        run: |
          kubectl get deployments -A
          kubectl get pods -A
