name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r sensor_api/requirements.txt
          pip install -r basic_versioning/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 sensor_api basic_versioning --max-line-length=100

      - name: Run unit tests
        run: |
          pytest sensor_api/test_app.py basic_versioning/test_version.py --maxfail=5 --disable-warnings -q

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terrascan
        run: |
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
          install terrascan /usr/local/bin && rm terrascan

      - name: Run Terrascan on Kubernetes Manifests
        run: terrascan scan --iac-type k8s --iac-dir kubernetes/

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-test, security-scan]
    outputs:
      sensor_image_digest: ${{ steps.export-digest.outputs.sensor_image_digest }}
      versioning_image_digest: ${{ steps.export-digest.outputs.versioning_image_digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker images
        run: |
          SENSOR_IMAGE_TAG="ghcr.io/ayushi024/hivebox-sensor-api:$(git rev-parse --short HEAD)"
          VERSIONING_IMAGE_TAG="ghcr.io/ayushi024/hivebox-basic-versioning:$(git rev-parse --short HEAD)"

          docker build -t $SENSOR_IMAGE_TAG -f ./sensor_api/Dockerfile ./sensor_api
          docker push $SENSOR_IMAGE_TAG

          docker build -t $VERSIONING_IMAGE_TAG -f ./basic_versioning/Dockerfile ./basic_versioning
          docker push $VERSIONING_IMAGE_TAG

      - name: Get Image Digests
        id: export-digest
        run: |
          SENSOR_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $SENSOR_IMAGE_TAG)
          VERSIONING_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $VERSIONING_IMAGE_TAG)

          echo "sensor_image_digest=$SENSOR_DIGEST" >> $GITHUB_ENV
          echo "versioning_image_digest=$VERSIONING_DIGEST" >> $GITHUB_ENV

  update-manifests:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq for YAML Manipulation
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.24.5/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Update Kubernetes Manifests with Digests
        run: |
          yq eval -i '.spec.template.spec.containers[0].image = "${{ env.sensor_image_digest }}"' kubernetes/sensor_api-deployment.yaml
          yq eval -i '.spec.template.spec.containers[0].image = "${{ env.versioning_image_digest }}"' kubernetes/versioning-deployment.yaml

      - name: Upload Updated Manifests as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: updated-manifests
          path: kubernetes/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: update-manifests
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Updated Manifests
        uses: actions/download-artifact@v4
        with:
          name: updated-manifests
          path: kubernetes/

      - name: Install KIND
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create KIND Cluster with Ingress-Nginx
        run: |
          cat <<EOF | kind create cluster --name hivebox --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                - containerPort: 443
                  hostPort: 443
          EOF

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f kubernetes/

      - name: Restart Deployments
        run: |
          kubectl rollout restart deployment/hivebox-sensor-api
          kubectl rollout restart deployment/hivebox-basic-versioning

      - name: Verify Deployment Status
        run: |
          kubectl get deployments -A
          kubectl get pods -A
