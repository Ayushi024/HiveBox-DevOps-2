name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r sensor_api/requirements.txt
          pip install -r basic_versioning/requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: flake8 sensor_api basic_versioning --max-line-length=100

      - name: Set Environment Variables
        run: |
          echo "OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" >> $GITHUB_ENV
          echo "APP_VERSION=v1.0.0" >> $GITHUB_ENV  # Ensure versioning works

      - name: Start APIs (Run in Background)
        run: |
          python sensor_api/app.py --host=0.0.0.0 --port=5000 & 
          python basic_versioning/app_version.py --host=0.0.0.0 --port=5001 &  # Corrected filename
          sleep 5  # Wait for apps to start

      - name: Run unit tests
        run: |
          pytest sensor_api/test_app.py basic_versioning/test_version.py --maxfail=5 --disable-warnings -q

      - name: Test network connectivity to OpenWeather API
        run: |
          echo "Checking OpenWeather API key presence: ${{ secrets.OPENWEATHER_API_KEY != '' }}"
          curl -I "https://api.openweathermap.org/data/2.5/weather?q=London&appid=$OPENWEATHER_API_KEY"

  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OpenSSF Scorecard using Docker
      run: |
         docker pull gcr.io/openssf/scorecard:v3.2.1
          docker run --rm gcr.io/openssf/scorecard:v3.2.1 --repo https://github.com/${{ github.repository }} > results.json


      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.json
        # Ensure that the 'results.json' from the previous step is correctly uploaded

      - name: Run Semgrep security scan
        run: |
          pip install semgrep
          semgrep scan --config=auto . --json > semgrep_results.json
        # Ensure the results are output in JSON format for further processing

      - name: Upload Semgrep results to SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep_results.json
        # Upload Semgrep results

      - name: Run Terrascan on Kubernetes manifests
        run: |
          curl -L https://github.com/tenable/terrascan/releases/latest/download/terrascan-linux-amd64 -o terrascan
          chmod +x terrascan
          sudo mv terrascan /usr/local/bin/
          terrascan scan -t k8s -d kubernetes/ > terrascan_results.json
        # Output Terrascan results to a file

      - name: Upload Terrascan results to SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: terrascan_results.json
        # Upload Terrascan results

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-test, security-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker images
        run: |
          SENSOR_IMAGE_TAG="ghcr.io/ayushi024/hivebox-sensor_api:$(git rev-parse --short HEAD)"
          VERSIONING_IMAGE_TAG="ghcr.io/ayushi024/hivebox-basic_versioning:$(git rev-parse --short HEAD)"

          docker build -t $SENSOR_IMAGE_TAG -f ./sensor_api/Dockerfile ./sensor_api
          docker push $SENSOR_IMAGE_TAG

          docker build -t $VERSIONING_IMAGE_TAG -f ./basic_versioning/Dockerfile ./basic_versioning
          docker push $VERSIONING_IMAGE_TAG

          echo "SENSOR_IMAGE_TAG=$SENSOR_IMAGE_TAG" >> $GITHUB_ENV
          echo "VERSIONING_IMAGE_TAG=$VERSIONING_IMAGE_TAG" >> $GITHUB_ENV

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes (KIND)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name hivebox

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/staging/

      - name: Restart deployments
        run: |
          kubectl set image deployment/hivebox-sensor_api hivebox-sensor_api=${{ env.SENSOR_IMAGE_TAG }}
          kubectl set image deployment/hivebox-basic_versioning hivebox-basic_versioning=${{ env.VERSIONING_IMAGE_TAG }}
          kubectl rollout restart deployment/hivebox-sensor_api
          kubectl rollout restart deployment/hivebox-basic_versioning

      - name: Delete KIND Cluster
        if: always()
        run: kind delete cluster --name hivebox

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes (KIND)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name hivebox

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/production/

      - name: Restart deployments
        run: |
          kubectl set image deployment/hivebox-sensor_api hivebox-sensor_api=${{ env.SENSOR_IMAGE_TAG }}
          kubectl set image deployment/hivebox-basic_versioning hivebox-basic_versioning=${{ env.VERSIONING_IMAGE_TAG }}
          kubectl rollout restart deployment/hivebox-sensor_api
          kubectl rollout restart deployment/hivebox-basic_versioning

      - name: Delete KIND Cluster
        if: always()
        run: kind delete cluster --name hivebox